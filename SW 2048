from collections import deque

def transposition(graph):
    row = len(graph)
    col = len(graph[0])
    new_graph = [ [0 for _ in range(row)] for _ in range(col)] 
    for i in range(row):
        for j in range(col):
            new_graph[j][i] = graph[i][j]
    return new_graph

T = int(input())
for test_case_num in range(1, T + 1):
    num , direction = input().split()
    num = int(num)
    graph = [ list(map( int , input().split())) for _ in range(num) ]
    new_graph = []
    
    if direction in [ 'up', 'down' ]: #위 아래의 경우
        graph = transposition(graph) # 전치시키고 
    
    for item in graph:     # 한줄씩 꺼내서 
        temp_list = [] # 한줄 저장할 임시 리스트
        
        while 0 in item:
            item.remove(0) # 0 다 지우고
        if direction in ['right', 'down']: #벽에 닿는 부분 먼저 작업해야함
            item.reverse()
        que = deque( item ) # que에 넣고
        while que: # 더 이상 없을때 까지 
            value = que.popleft() # 꺼내서
            if que and value == que[0]: # 다음께 있고 둘이 같으면 
                value = value + que.popleft()  #꺼내서 더하고 
            temp_list.append( value ) # 남은게 없거나 둘이 안같으면 그냥 넣음
        
        if direction in ['right', 'down']: #반대로 작업한거 원상복귀
            temp_list.reverse()
        
        zero_list = [ 0 for _ in range(num -len(temp_list) ) ] # 공간 맞추기 용 0 list
        if direction in ['left','up']: #이동방향이 왼쪽이면
            temp_list = temp_list + zero_list # 오른쪽에  패딩
        else: # 이동방향이 오른쪽이면 이거나 아래쪽이면
            temp_list = zero_list + temp_list # 왼쪽 패딩
        new_graph.append(temp_list)
    
    if direction in [ 'up', 'down' ]: #위 아래의 경우
        new_graph = transposition(new_graph) # 전치시키고 
    
    print(f'#{test_case_num}') 
    for item in new_graph:
        for i in range (len(item)):
            print(item[i], end = ' ')
        print()
