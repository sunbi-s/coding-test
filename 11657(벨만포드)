import sys
'''
벨만 포드의 재밌는점은 검사하는 간선의 순서가 상관이 없는 점이다. 
매번 모든 간선을 검사하며 임의의 1개의 노드를 최적화 시키기 때문이다.
1번 모든 간선을 순환시에 1개의 노드가 최적화 되기 때문에 시작점을 제외하고 |V|-1번을 반복한다.
1번의 순환에 시작점에서 가장 가까운 순서대로 노드 1개가 최적화되고 최적 하부의 법칙에 따라
가장 나주최종 노드까지 서서히 최적화된다.

'''
input = sys.stdin.readline # 이렇게 해두면 편하다
INF = 2e9 # 무한대 표시

# 노드의 개수, 간선의 개수
v_num, e_num = map(int, input().split())
# 모든 간선에 대한 정보
edges = []
# 시작 지점 부터 최단 거리 테이블을 무한으로 초기화
distance = [INF] * (v_num +1) #시작이 1이라 v+1개임. [INF for _ in range(v + 1)]

# 모든 간선의 정보 입력
for _ in range(e_num):
    start_node, end_node, cost  = map(int, input().split())
    # 시작 지점, 도착 지점, 사이의 비용을 입력
    edges.append((start_node, end_node, cost))


def bellman_ford(start):
    # 시작 노드에 대해서 초기화
    distance[start] = 0
    # 전체 v - 1번의 라운드(round)를 반복
    for i in range(v_num):
        # 매 반복마다 모든 '간선'을 확인한다.
        for j in range(e_num):
            # j번째의 출발 노드, 도착 노드, 간선의 비용 
            cur_node, next_node, edge_cost = edges[j]
            # 현재 기록된 시작노드에서 다음 노드까지의 최소 비용보다 
            # 현재 간선을 거쳐서 다음 노드에 도달하는 비용이 낮은 경우 기록된 값을 업데이트 
            if distance[cur_node] != INF and distance[next_node] > distance[cur_node] + edge_cost:
                distance[next_node] = distance[cur_node] + edge_cost
                # v번째 라운드에서도 값이 갱신된다면 음수 순환이 존재
                # 이유는 특정 노드에서의 최적의 경로가 v-1개 보다 많은 노드를 지나서 도착한다는 뜻이고
                # 이는 최적경로가 단순경로가 아니라 중복되는 노드를 거친다(순환)는 뜻이다.
                if i == v_num - 1:
                    return True

    return False


# 벨만 포드 알고리즘 수행
negative_cycle = bellman_ford(1)

# 음수 순환이 존재하면 -1 출력
if negative_cycle:
    print("-1")
else:
    # 1번 노드를 제외한 다른 모든 노드로 가기 위한 최단 거리를 출력
    for i in range(2, v_num + 1):
        # 도달할 수 없는 경우, -1 출력
        if distance[i] == INF:
            print("-1")
        # 도달할 수 있으면 거리 출력
        else:
            print(distance[i])
